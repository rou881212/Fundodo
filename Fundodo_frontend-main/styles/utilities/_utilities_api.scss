@use "@/styles/rwd/grid-breakpoints" as v;
@use "@/styles/rwd/rfs" as rfs;
@use "@/styles/rwd/rwd-system" as rwd;
@use "utilities" as u;
@use "utilities-mixin" as u-m;

// 以迴圈套用所有 RWD 斷點
@each $breakpoint in map-keys(v.$grid-breakpoints) {
  @include rwd.rwd-above($breakpoint) {
    $infix: rwd.breakpoint-infix($breakpoint);

    // 以迴圈套用所有 utility property
    @each $key, $utility in u.$utilities {
      // The utility can be disabled with `false`, thus check if the utility is a map first
      // Only proceed if responsive media queries are enabled or if it's the base media query
      @if type-of($utility) == "map" and (map-get($utility, responsive) or $infix == "") {
        @include u-m.generate-utility($utility, $infix);
      }
    }
  }
}

// RFS rescaling
@media (min-width: rfs.$rfs-mq-value) {
  @each $breakpoint in map-keys(v.$grid-breakpoints) {
    $infix: rwd.breakpoint-infix($breakpoint);

    @if (map-get(v.$grid-breakpoints, $breakpoint) < rfs.$rfs-breakpoint) {
      // Loop over each utility property
      @each $key, $utility in u.$utilities {
        // The utility can be disabled with `false`, thus check if the utility is a map first
        // Only proceed if responsive media queries are enabled or if it's the base media query
        @if type-of($utility) == "map" and map-get($utility, rfs) and (map-get($utility, responsive) or $infix == "") {
          @include u-m.generate-utility($utility, $infix, true);
        }
      }
    }
  }
}
